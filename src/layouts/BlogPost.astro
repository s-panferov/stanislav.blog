---
import { Image } from "astro:assets";
import type { CollectionEntry } from "astro:content";
import BaseHead from "../components/BaseHead.astro";
import Footer from "../components/Footer.astro";
import FormattedDate from "../components/FormattedDate.astro";
import Header from "../components/Header.astro";
import Tag from "../components/Tag.astro";
import ReadNext from "../components/ReadNext.astro";

type Props = CollectionEntry<"blog">["data"] & { id: string };

const { title, description, pubDate, updatedDate, heroImage, tags, id } =
  Astro.props;
---

<html lang="en">
  <head>
    <BaseHead title={title} description={description} />
    <style>
      main {
        width: calc(100% - 2em);
        max-width: 100%;
        margin: 0;
      }
      .hero-image {
        width: 100%;
      }
      .hero-image img {
        display: block;
        margin: 0 auto;
        max-width: 30%;
        border-radius: 12px;
        box-shadow: var(--box-shadow);
      }
      .prose {
        width: 720px;
        max-width: calc(100% - 2em);
        margin: auto;
        padding: 1em;
        color: var(--text-primary);
      }
      @media (max-width: 900px) {
        .prose {
          padding: 1em 0.5em;
        }
      }
      .title {
        margin-bottom: 1em;
        padding: 1em 0;
        text-align: center;
        line-height: 1;
      }
      .title h1 {
        margin: 0 0 0.5em 0;
      }
      .date {
        margin-bottom: 0.5em;
        color: rgb(var(--gray));
      }
      .last-updated-on {
        font-style: italic;
      }
    </style>
  </head>

  <body>
    <Header />
    <main>
      <article>
        <div class="hero-image">
          {
            heroImage && (
              <Image width={1020} height={510} src={heroImage} alt="" />
            )
          }
        </div>
        <div class="prose">
          <div class="title">
            <div class="date">
              <FormattedDate date={pubDate} />
              {
                updatedDate && (
                  <div class="last-updated-on">
                    Last updated on <FormattedDate date={updatedDate} />
                  </div>
                )
              }
            </div>
            <h1>{title}</h1>
            {
              tags && tags.length > 0 && (
                <div
                  class="tags"
                  style="display: flex; flex-wrap: wrap; gap: 0.5rem; justify-content: center; margin: 1rem 0;"
                >
                  {tags.map((tag: string) => (
                    <Tag tag={tag} />
                  ))}
                </div>
              )
            }
            <hr />
          </div>
          <slot />
          <ReadNext currentPostId={id} currentTags={tags} />
        </div>
      </article>
    </main>
    <div id="giscus_container" class="prose">
      <hr />
      <h2 style="text-align: center; margin-bottom: 1em;">Comments</h2>
      <script
        src="https://giscus.app/client.js"
        data-repo="s-panferov/stanislav.blog"
        data-repo-id="R_kgDOPrm9bA"
        data-category="Q&A"
        data-category-id="DIC_kwDOPrm9bM4CvZ3Z"
        data-mapping="title"
        data-strict="0"
        data-reactions-enabled="1"
        data-emit-metadata="0"
        data-input-position="bottom"
        data-theme="preferred_color_scheme"
        data-lang="en"
        data-loading="lazy"
        crossorigin="anonymous"
        async></script>
    </div>
    <Footer />
  </body>
</html>
